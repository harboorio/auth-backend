name: 'Release'

on:
    push:
        branches:
            - main
        tags:
            - '^v[0-9]+'

env:
    CI: 1 # disable watch mode when running vitest
    NODE_ENV: production
    HUSKY: 0 # prevent husky scripts to run
    GITHUB_TOKEN: ${{ secrets.PERSONAL_PAT }}
    NPM_TOKEN: ${{ secrets.PERSONAL_PAT }}
    # aws vars are to fetch env vars from aws secret manager
    AWS_REGION: ${{ secrets.AWS_REGION }}
    AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
    AWS_ACCESS_KEY_SECRET: ${{ secrets.AWS_ACCESS_KEY_SECRET }}

# fine-tune permission for semantic-release
permissions:
    contents: write # to be able to publish a GitHub release
    issues: write # to be able to comment on released issues
    pull-requests: write # to be able to comment on released pull requests
    id-token: write # to enable use of OIDC for npm provenance
    packages: write

jobs:
    release:
        runs-on: ubuntu-24.04
        steps:
            -   uses: actions/checkout@v4
            -   uses: pnpm/action-setup@v4
                with:
                    version: 10
            -   name: install dependencies
                run: pnpm i --frozen-lockfile
            -   name: fetch environment
                run: pnpm exec harboor env save ./.env
            -   name: typecheck
                run: pnpm run check
            -   name: build
                run: pnpm run build
            -   name: test
                run: pnpm run test run --exclude **/*.integration.test.ts
            -   name: release
                run: pnpm exec semantic-release
            -   name: find new version
                id: find-new-version
                # fetches the version prop of the newly published package
                run: echo "NEW_VERSION=$(npm view ./ version)" >> "$GITHUB_OUTPUT"
                #run: echo "NEW_VERSION=$(npm view "$(npm view ./ name)"@latest --registry "$(npm view ./ publishConfig.registry)" version)" >> "$GITHUB_OUTPUT"
            -   name: login to container registry
                uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ env.GITHUB_TOKEN }}
            -   name: setup docker
                uses: docker/setup-buildx-action@v3
            -   name: create test container
                uses: docker/build-push-action@v6
                with:
                    context: .
                    target: test
                    push: true
                    tags: ghcr.io/${{ github.repository }}:${{ steps.find-new-version.outputs.NEW_VERSION }}-test
            -   name: create production container
                uses: docker/build-push-action@v6
                with:
                    context: .
                    target: prod
                    push: true
                    tags: ghcr.io/${{ github.repository }}:${{ steps.find-new-version.outputs.NEW_VERSION }}
