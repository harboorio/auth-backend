name: "harboor-auth"

services:
    core:
        image: ghcr.io/harboorio/auth-backend:${APP_IMAGE_VERSION}
        ports:
            - "${PUBLIC_PORT}:3000"
        environment:
            - AWS_REGION
            - AWS_ACCESS_KEY
            - AWS_ACCESS_KEY_SECRET
        depends_on:
            core-test:
                condition: service_completed_successfully
            rabbitmq:
                condition: service_healthy
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: curl --fail http://${HOST} || exit 1
            interval: 60s
            retries: 5
            start_period: 30s
            timeout: 3s
        profiles:
            - production
        restart: unless-stopped

    core-test:
        image: ghcr.io/harboorio/auth-backend:${APP_IMAGE_VERSION}-test
        environment:
            - AWS_REGION
            - AWS_ACCESS_KEY
            - AWS_ACCESS_KEY_SECRET
        depends_on:
            rabbitmq:
                condition: service_healthy
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        profiles:
            - production
        restart: no
        deploy:
            restart_policy:
                condition: none

    core-dev:
        build:
            context: .
            dockerfile: Dockerfile
            target: dev
        volumes:
            -   type: bind
                source: ./
                target: /app/
            -   type: volume # preventing node_modules getting copied into the dev env
                source: node_modules # this is an id, not a path
                target: /app/node_modules/
        ports:
            - "3000:3000"
        environment:
            - AWS_REGION
            - AWS_ACCESS_KEY
            - AWS_ACCESS_KEY_SECRET
        depends_on:
            rabbitmq:
                condition: service_healthy
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        profiles:
            - development
        restart: unless-stopped

    rabbitmq:
        image: rabbitmq:4-alpine
        hostname: harboor
        environment:
            RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
            RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        healthcheck:
            test: rabbitmq-diagnostics check_port_connectivity
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 10s
        restart: unless-stopped

    postgres:
        image: postgres:17.3-alpine3.21
        shm_size: 128mb
        volumes:
            - postgres_data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
            POSTGRES_DB: ${POSTGRES_DB}
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready" ]
            interval: 30s
            timeout: 20s
            retries: 5
        restart: unless-stopped

    redis:
        image: redis:7.4.2-alpine3.21
        volumes:
            - redis_data:/data
        environment:
            - REDIS_PASSWORD
        command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1 --loglevel warning
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            timeout: 20s
            retries: 5
        restart: unless-stopped

volumes:
    rabbitmq_data:
    postgres_data:
    redis_data:
    node_modules:

networks:
    default:
        name: harboor
        external: true